[metadata]
name = panoptes-pipeline
description = PANOPTES Image Processing for the Extraction of Lightcurves in Nearby Exoplanets!
author = PANOPTES Team
author-email = developers@projectpanoptes.org
license = mit
long-description = file: README.md
long-description-content-type = text/markdown; charset=UTF-8
url = https://github.com/panoptes/panoptes-pipeline
project-urls =
    Documentation = https://panoptes-pipeline.readthedocs.io
    POCS Documentation = https://pocs.readthedocs.io
    Project PANOPTES = https://www.projectpanoptes.org
    Forum = https://forum.projectpanoptes.org
# Change if running only on Windows, Mac or Linux (comma-separated)
platforms = linux
# Add here all kinds of additional classifiers as defined under
# https://pypi.python.org/pypi?%3Aaction=list_classifiers
classifiers =
    Development Status :: 4 - Beta
    Environment :: Console
    Intended Audience :: Science/Research
    License :: OSI Approved :: MIT License
    Operating System :: POSIX
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.8
    Programming Language :: Python :: 3 :: Only
    Topic :: Scientific/Engineering :: Astronomy
    Topic :: Scientific/Engineering :: Physics

[options]
zip_safe = False
packages = find:
include_package_data = True
package_dir =
    =src

# DON'T CHANGE THE FOLLOWING LINE! IT WILL BE UPDATED BY PYSCAFFOLD!
setup_requires = pyscaffold>=3.2a0,<3.3a0
# Add here dependencies of your project (semicolon/line-separated), e.g.
install_requires =
    astroplan
    numpy
    panoptes-utils
    pandas>1.0.0,!=1.0.4
    scipy
# The usage of test_requires is discouraged, see `Dependency Management` docs
# tests_require = pytest; pytest-cov
# Require a specific Python version, e.g. Python 2.7 or >= 3.4
python_requires = >=3.8

[options.packages.find]
where = src
exclude =
    tests

[options.extras_require]
# e.g. `pip install panoptes-pipeline[testing]` like:
testing =
    coverage
    mocket
    pycodestyle
    pytest
    pytest-cov
    pytest-doctestplus
    pytest-remotedata>=0.3.1'

[options.entry_points]
# Add here console scripts like:
# console_scripts =
#    panoptes-config-server = panoptes.utils.config.cli:config_server_cli

[test]
# py.test options when running `python setup.py test`
# addopts = --verbose
extras = True

[tool:pytest]
addopts =
    --strict-markers
    --doctest-modules
    --test-databases all
    --strict-markers
    -x
    -vv
    -ra
norecursedirs =
    script
    resources
    dist
    build
    .tox
testpaths = tests src
doctest_optionflags = ELLIPSIS NORMALIZE_WHITESPACE ALLOW_UNICODE IGNORE_EXCEPTION_DETAIL
filterwarnings =
    ignore:elementwise == comparison failed:DeprecationWarning
    ignore::pytest.PytestDeprecationWarning
doctest_plus = enabled
    slow: marks tests as slow (deselect with '-m "not slow"').

[aliases]
dists = bdist_wheel

[bdist_wheel]
# Use this option if your package is pure-python
universal = 1

[build_sphinx]
source_dir = docs
build_dir = build/sphinx

[devpi:upload]
# Options for the devpi: PyPI server and packaging tool
# VCS export must be deactivated since we are using setuptools-scm
no-vcs = 1
formats = bdist_wheel

[flake8]
# Some sane defaults for the code style checker flake8
exclude =
    .tox
    build
    dist
    .eggs
    docs/conf.py

[pycodestyle]
max-line-length = 100

[coverage:run]
branch = True
concurrency =
    multiprocessing
parallel = True

[coverage:paths]
source =
    src/
    */site-packages/

[coverage:report]
# Regexes for lines to exclude from consideration
exclude_lines =
# Have to re-enable the standard pragma
    pragma: no cover

# Don't complain about missing debug-only code:
    def __repr__
    if self\.debug

# Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError

# Don't complain if non-runnable code isn't run:
    if 0:
    if __name__ == .__main__.:

show_missing = True
ignore_errors = True

[pyscaffold]
# PyScaffold's parameters when the project was created.
# This will be used when updating. Do not change!
version = 3.2.3
package = pipeline
extensions =
    no_skeleton
    namespace
namespace = panoptes
